@page "/admin"
@rendermode InteractiveServer
@attribute [Authorize]

@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject FirestoreService FirestoreService
@inject HttpClient Http

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <div class="alert alert-success">
                <div class="container py-4">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="mb-0">🎛 Adminpanel – Projekt</h2>
                        <div class="d-flex gap-2">
                            <button class="btn btn-success" @onclick="CreateNewProject">➕ Lägg till nytt projekt</button>
                            <button class="btn btn-outline-secondary" @onclick="Logout">🚪 Logga ut</button>
                        </div>
                    </div>

                    @if (projects == null)
                    {
                        <p>Laddar projekt...</p>
                    }
                    else
                    {
                        <div class="row g-4">
                            @foreach (var project in projects)
                            {
                                <div class="col-12 col-md-6 col-lg-4">
                                    <div class="card h-100 shadow-sm">
                                        @if (!string.IsNullOrWhiteSpace(project.ImageUrl))
                                        {
                                            <img src="@project.ImageUrl" class="card-img-top" alt="@project.Title" />
                                        }

                                        <div class="card-body d-flex flex-column">
                                            <h5 class="card-title">@project.Title</h5>
                                            <p class="card-text flex-grow-1">@project.Description</p>

                                            @if (project.Tags?.Any() == true)
                                            {
                                                <div class="mb-2">
                                                    @foreach (var tag in project.Tags)
                                                    {
                                                        <span class="badge bg-secondary me-1">@tag</span>
                                                    }
                                                </div>
                                            }

                                            <div class="d-flex gap-2 mt-auto">
                                                <button class="btn btn-sm btn-outline-danger w-50" @onclick="() => DeleteProjectAsync(project)">🗑 Ta bort</button>
                                                <button class="btn btn-sm btn-outline-secondary w-50" @onclick="() => OpenEditModal(project)">✏️ Redigera</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    @if (showModal && editingProject != null)
                    {
                        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">@((string.IsNullOrEmpty(editingProject.Id) ? "➕ Lägg till nytt projekt" : "✏️ Redigera projekt"))</h5>
                                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="mb-3">
                                            <label class="form-label">Titel</label>
                                            <input class="form-control" @bind="editingProject.Title" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Beskrivning</label>
                                            <textarea class="form-control" @bind="editingProject.Description" rows="3"></textarea>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Länk</label>
                                            <input class="form-control" @bind="editingProject.Link" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Taggar (komma-separerat)</label>
                                            <input class="form-control" @bind="tagsInput" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Ladda upp ny bild (valfri)</label>
                                            <InputFile OnChange="OnImageSelected" class="form-control" accept="image/*" />
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button class="btn btn-secondary" @onclick="CloseModal">Avbryt</button>
                                        <button class="btn btn-success" @onclick="SaveProjectAsync">💾 Spara</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="alert alert-danger">
                ❌ Du är inte inloggad
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private List<Project>? projects;
    private Project? editingProject;
    private string tagsInput = "";
    private IBrowserFile? selectedImage;
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            Navigation.NavigateTo("/login", true);
            return;
        }

        projects = await FirestoreService.GetProjectsAsync();
    }

    private void CreateNewProject()
    {
        editingProject = new Project();
        tagsInput = "";
        selectedImage = null;
        showModal = true;
    }

    private void OpenEditModal(Project project)
    {
        editingProject = new Project
            {
                Id = project.Id,
                Title = project.Title,
                Description = project.Description,
                Link = project.Link,
                Tags = project.Tags?.ToList() ?? new(),
                ImageUrl = project.ImageUrl
            };

        tagsInput = string.Join(", ", editingProject.Tags ?? []);
        selectedImage = null;
        showModal = true;
    }

    private async Task SaveProjectAsync()
    {
        if (editingProject == null) return;

        editingProject.Tags = tagsInput
            .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .ToList();

        if (selectedImage != null)
        {
            var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images", "projects");
            Directory.CreateDirectory(uploadsFolder);

            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(selectedImage.Name)}";
            var filePath = Path.Combine(uploadsFolder, fileName);

            await using FileStream fs = new(filePath, FileMode.Create);
            await selectedImage.OpenReadStream().CopyToAsync(fs);

            editingProject.ImageUrl = $"/images/projects/{fileName}";
        }

        if (string.IsNullOrEmpty(editingProject.Id))
        {
            await FirestoreService.AddProjectAsync(editingProject);
        }
        else
        {
            await FirestoreService.UpdateProjectAsync(editingProject);
        }

        showModal = false;
        editingProject = null;
        selectedImage = null;
        projects = await FirestoreService.GetProjectsAsync();
    }

    private async Task DeleteProjectAsync(Project project)
    {
        await FirestoreService.DeleteProjectAsync(project);
        projects = await FirestoreService.GetProjectsAsync();
    }

    private void OnImageSelected(InputFileChangeEventArgs e)
    {
        selectedImage = e.File;
    }

    private void CloseModal()
    {
        editingProject = null;
        selectedImage = null;
        showModal = false;
    }

    private async Task Logout()
    {
        await Http.PostAsync("/api/auth/logout", null);
        Navigation.NavigateTo("/login", true);
    }
}
